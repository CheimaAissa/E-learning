package com.elearning.Teacher;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


	@Controller
	@RequestMapping("/Teachers")
	public class TeacherController {
	    
		
		
		private TeacherService teacherService;
	    private TeacherRepository teacherRepository;
	    @Autowired
	    private CourseService courseservice;

	 
	    @Autowired
	    public TeacherController(TeacherService teacherService, TeacherRepository teacherRepository,
	    		CourseService courseservice) {
			super();
			this.teacherService = teacherService;
			this.teacherRepository = teacherRepository;
			this.courseservice = courseservice;
		}

		@GetMapping("/add_teacher")
	    public String addTeacher(Model model) {
	        model.addAttribute("teacher", new Teacher());
	        return "Teachers/Teacher_add";
	    }

	    @PostMapping("/save_teacher")
	   // @PreAuthorize("hasRole('ROLE_USER')")
	    public String saveTeacher(Teacher teacher) {
	        teacherService.create(teacher);

	        return "redirect:/Teachers";
	    }

	    @GetMapping("/edit/{id}")
	    @PreAuthorize("hasRole('ROLE_TEACHER')")
	    public String getTeacherForUpdate(@PathVariable Long id,Model model) {
	        try {
	            Teacher teacherActual = teacherRepository.findById(id).get();
	            model.addAttribute("teacher", teacherActual);
	            return "Teachers/Teacher_edit";
	        } catch (Exception e) {
	            e.printStackTrace();
	            model.addAttribute("error", e);
	            return "error";
	        }
	    }

	    @PostMapping("/update/{id}")
	    @PreAuthorize("hasRole('ROLE_TEACHER')")
	    public String updateTeacher(@PathVariable Long id, Teacher teacher, RedirectAttributes attributes, Model model){

	        try {
	            Teacher currentTeacher = teacherRepository.findById(id).get();
	            currentTeacher.setFirstnameTeacher(teacher.getFirstnameTeacher());
	            currentTeacher.setLastnameteacher(teacher.getLastnameteacher());
	            currentTeacher.setEmailTeacher(teacher.getEmailTeacher());
	            currentTeacher.setDescTeacher(teacher.getDescTeacher());
	            currentTeacher.setImgurl(teacher.getImgurl());

	            teacherService.update(teacher);
	            attributes.addAttribute("id", id);

	            return "redirect:/Teachers";
	        } catch (Exception e) {
	            e.printStackTrace();
	            model.addAttribute("error", e);
	            return "error";
	        }
	    }

	    @PostMapping("/updateDetail/{id}")
	    @PreAuthorize("hasRole('ROLE_TEACHER')")
	    public String updateDetailTeacher(@PathVariable Long id, Teacher teacher, RedirectAttributes attributes, Model model) {

	        try {
	            Teacher current = teacherRepository.findById(id).get();
	            current.setDetailTeacher(teacher.getDetailTeacher());
	            teacherService.updateDetails(current);

	            attributes.addAttribute("id", id);
	            return "redirect:/Teachers/{id}";
	        } catch (Exception e) {
	            e.printStackTrace();
	            model.addAttribute("error", e);
	            return "error";
	        }
	    }

	    @GetMapping
	    public String getTeachersList(Model model) {
	        List<Teacher> Teachers = teacherService.getAll();
	        model.addAttribute("Teachers", Teachers);
	        return "Teachers/Teachers";
	    }

	    @GetMapping("/delete_teacher/{id}")
	    @PreAuthorize("hasRole('ROLE_ADMIN')")
	    public String deleteTeacher(@PathVariable Long id, Model model) {
	        try {
	            teacherService.delete(id);

	            return "redirect:/Teachers";
	        } catch (Exception e) {
	            e.printStackTrace();
	            model.addAttribute("error", e);
	            return "error";
	        }
	    }

	    @GetMapping("/{id}")
	    public String getTeacherDetail(@PathVariable Long id, Model model) {
	        try {
	            Teacher teacher = teacherRepository.findById(id).get();
	            model.addAttribute("teacher", teacher);
	            List<Course> course = courseservice.findAllByTeacher(teacher);
	            model.addAttribute("courses", course);
	            return "Teachers/Teacher_detail";
	        } catch (Exception e) {
	            e.printStackTrace();
	            model.addAttribute("error", e);
	            return "error";
	        }
	    }
	    

}

