package com.elearning.Course;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;



@Controller
@RequestMapping("/courses")
public class CourseController {
	
	
	
	private CourseService courseService;
    private CourseRepository courseRepository;
    private EnrollmentRepository enrollmentRepository;
    private UserRepository userRepository;
    private TeacherRepository teacherRepository;
	
    
    @Autowired
    public CourseController(CourseService courseService, CourseRepository courseRepository,
			EnrollmentRepository enrollmentRepository, UserRepository userRepository,
			TeacherRepository teacherRepository) {
		super();
		this.courseService = courseService;
		this.courseRepository = courseRepository;
		this.enrollmentRepository = enrollmentRepository;
		this.userRepository = userRepository;
		this.teacherRepository = teacherRepository;
	}
    @GetMapping
    public String getCoursesList(Model model) {
        List<Course> course = courseService.getAll();
        model.addAttribute("courses", course);
        return "Courses/course";
    }
    

    @GetMapping("/add/{id_teacher}")
    @PreAuthorize("hasRole('ROLE_TEACHER')")
    public String addCourse(@PathVariable Long id_teacher, Model model) {
        try {
            Teacher current = teacherRepository.findById(id_teacher).get();
            model.addAttribute("course", new Course());
            model.addAttribute("teacher", current);
            return "Courses/course_add";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", e);
            return "error";
        }
    }

    @PostMapping("/add/{id_teacher}")
    @PreAuthorize("hasRole('ROLE_TEACHER')")
    public String saveCourse(@PathVariable Long id_teacher, Course course, Model model) {
        try {
            Teacher current = teacherRepository.findById(id_teacher).get();
            course.setTeacher(current);
            courseService.create(course);
            return "redirect:/courses";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", e);
            return "error";
        }

    }

    @GetMapping("/edit/{id_course}")
    @PreAuthorize("hasRole('ROLE_TEACHER')")
    public String getCourseForUpdate(@PathVariable Long id_course, Model model) {
        try {
            Course courseActual = courseRepository.findById(id_course).get();
            model.addAttribute("course", courseActual);
            return "Courses/course_edit";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", e);
            return "error";
        }
    }

    @PostMapping("/edit/{id_teacher}/{id_course}")
    @PreAuthorize("hasRole('ROLE_TEACHER')")
    public String updateCourse(@PathVariable Long id_teacher, @PathVariable Long id_course, Course course, Model model, RedirectAttributes attributes) {

        try {
            Teacher currentTeacher = teacherRepository.findById(id_teacher).get();
            course.setTeacher(currentTeacher);

            courseService.update(course, id_course);
            attributes.addAttribute("id_course", id_course);

            return "redirect:/courses/{id_course}";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", e);
            return "error";
        }
    }

   

    @GetMapping("/delete/{id_course}")
    @PreAuthorize("hasRole('ROLE_TEACHER') or hasRole('ROLE_ADMIN')")
    public String deleteCourse(@PathVariable Long id_course, Model model) {
        try {
            Course courseActual = courseRepository.findById(id_course).get();
            courseService.delete(courseActual);

            return "redirect:/courses";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", e);
            return "error";
        }
    }

    @GetMapping("/{id_Course}")
   // @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")
    public String getCourseDetail(@PathVariable Long id_Course, Authentication authentication, Model model) {
        String username = authentication.getName();
        Boolean enrollment = false;
        try {
            Course course = courseRepository.findById(id_Course).get();
            User user = userRepository.findByUsername(username);
            	if (null != enrollmentRepository.findByCourseAndUser(course, user)) {
            		enrollment = true;
            }
            model.addAttribute("course", course);
            model.addAttribute("enrollment", enrollment);
            return "Courses/course_detail";
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", e);
            return "error";
        }
    }
    

}
